#!/bin/bash
# Google Drive Expander v7 - Ë∞∑Ê≠åÁΩëÁõòÊâ©ÂÖÖÂô® (Á®≥ÂÆöÁÆÄÂåñÁâà)
# Author: DX

###################### Âü∫Êú¨ÈÖçÁΩÆ ######################
WARC_LIST_URL="https://data.commoncrawl.org/crawl-data/CC-MAIN-2025-30/warc.paths.gz"
DEST_PATH="/dx"
MAX_TRANSFER="700G"

# ÁΩëÁªú‰ºòÂåñÈÖçÁΩÆ
THREADS=16
CHUNK_SIZE="256M"
BUFFER_SIZE="2G"
MULTI_THREAD_STREAMS=8

# ÁõëÊéßÈÖçÁΩÆ
LOW_SPEED_MB=5
LOW_SPEED_SECONDS=60

TMP_DIR="/tmp/warc_uploader"
LOG_DIR="./logs"
mkdir -p "$TMP_DIR" "$LOG_DIR"

export LANG=zh_CN.UTF-8
export LC_ALL=zh_CN.UTF-8

DEBUG_MODE=${DEBUG_MODE:-0}

###################### Â∑•ÂÖ∑ÂáΩÊï∞ ######################
debug_log() {
    if [ "$DEBUG_MODE" = "1" ]; then
        echo "[DEBUG $(date '+%H:%M:%S')] $1" >&2
    fi
}

error_log() {
    echo "[ERROR $(date '+%H:%M:%S')] $1" >&2
}

###################### ÁΩëÁªúÁõëÊéßÂáΩÊï∞ ######################
get_main_interface() {
    ip route | grep '^default' | awk '{print $5}' | head -1 | cut -d'@' -f1
}

get_network_speed() {
    local interface="$1"
    local speed_file="$TMP_DIR/net_${interface}.tmp"
    
    # Ëé∑ÂèñÁΩëÂç°ÁªüËÆ°
    local stats_line
    stats_line=$(grep "^[ ]*${interface}[:@]" /proc/net/dev 2>/dev/null | head -1)
    
    if [ -z "$stats_line" ]; then
        echo "0"
        return
    fi
    
    local current_bytes
    current_bytes=$(echo "$stats_line" | awk '{print $10}')
    local current_time
    current_time=$(date +%s)
    
    if ! echo "$current_bytes" | grep -q '^[0-9]*$'; then
        echo "0"
        return
    fi
    
    if [ -f "$speed_file" ]; then
        local prev_bytes prev_time
        if read -r prev_bytes prev_time < "$speed_file" 2>/dev/null; then
            if echo "$prev_bytes" | grep -q '^[0-9]*$' && echo "$prev_time" | grep -q '^[0-9]*$'; then
                local time_diff=$((current_time - prev_time))
                local bytes_diff=$((current_bytes - prev_bytes))
                
                if [ "$time_diff" -ge 5 ] && [ "$bytes_diff" -ge 0 ]; then
                    local speed_mb=$((bytes_diff / time_diff / 1048576))
                    echo "$speed_mb"
                else
                    echo "0"
                fi
            else
                echo "0"
            fi
        else
            echo "0"
        fi
    else
        echo "0"
    fi
    
    echo "$current_bytes $current_time" > "$speed_file" 2>/dev/null || true
}

reset_network_monitor() {
    local interface="$1"
    rm -f "$TMP_DIR/net_${interface}.tmp"
    get_network_speed "$interface" >/dev/null 2>&1
}

###################### ËøõÁ®ãÁÆ°ÁêÜÂáΩÊï∞ ######################
wait_processes() {
    local wait_count=0
    local max_wait=120
    
    while [ "$wait_count" -lt "$max_wait" ]; do
        local alive=0
        
        for pid in "$@"; do
            if ps -p "$pid" > /dev/null 2>&1; then
                alive=$((alive + 1))
            fi
        done
        
        if [ "$alive" -eq 0 ]; then
            echo -e "\n‚îú‚îÄ ‚úÖ ÊâÄÊúâËøõÁ®ãÂÆåÊàê"
            return 0
        fi
        
        if [ $((wait_count % 20)) -eq 0 ] && [ "$wait_count" -gt 0 ]; then
            echo -e "\n‚îú‚îÄ ‚è≥ Á≠âÂæÖ‰∏≠... Ââ©‰Ωô $alive ‰∏™ËøõÁ®ã"
        fi
        
        wait_count=$((wait_count + 1))
        sleep 3
    done
    
    echo -e "\n‚îú‚îÄ ‚ö†Ô∏è Á≠âÂæÖË∂ÖÊó∂ÔºåÂº∫Âà∂ÁªàÊ≠¢ËøõÁ®ã"
    for pid in "$@"; do
        kill -9 "$pid" 2>/dev/null || true
    done
    sleep 2
    return 1
}

cleanup_processes() {
    local remote="$1"
    echo "‚îú‚îÄ üßπ Ê∏ÖÁêÜËøõÁ®ã..."
    
    local pids
    pids=$(pgrep -f "rclone.*$remote:" 2>/dev/null || true)
    
    if [ -n "$pids" ]; then
        echo "$pids" | xargs -r kill -9 2>/dev/null || true
        sleep 2
        echo "‚îú‚îÄ ‚úÖ Ê∏ÖÁêÜÂÆåÊàê"
    else
        echo "‚îú‚îÄ ‚úÖ Êó†ÈúÄÊ∏ÖÁêÜ"
    fi
}

###################### Â≠òÂÇ®ÁÆ°ÁêÜÂáΩÊï∞ ######################
get_node_storage() {
    local remote="$1"
    timeout 15 rclone size "$remote:$DEST_PATH" --json 2>/dev/null | \
        jq -r '.bytes // 0' 2>/dev/null || echo "0"
}

verify_batch_completion() {
    local remote="$1"
    local last_bytes="$2"
    local attempts=0
    
    while [ "$attempts" -lt 6 ]; do
        local current_bytes
        current_bytes=$(get_node_storage "$remote")
        if echo "$current_bytes" | grep -q '^[0-9]*$' && [ "$current_bytes" -gt "$last_bytes" ]; then
            echo "$current_bytes"
            return 0
        fi
        attempts=$((attempts + 1))
        sleep 10
    done
    
    echo "$last_bytes"
    return 1
}

###################### ÂêØÂä®ÁïåÈù¢ ######################
show_banner() {
    clear
    echo -e "\033[38;5;39m"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                              ‚ïë
‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó   ‚ïë
‚ïë  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù   ‚ïë
‚ïë  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ïë
‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù      ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó    ‚ïë
‚ïë  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó   ‚ïë
‚ïë   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïë
‚ïë                                                                              ‚ïë
‚ïë              üåç GOOGLE DRIVE EXPANDER v7.0 - DX üåç                          ‚ïë
‚ïë                       Ë∞∑Ê≠åÁΩëÁõòÊâ©ÂÖÖÂô® (Á®≥ÂÆöÁâà)                                   ‚ïë
‚ïë                                                                              ‚ïë
‚ïë                     üöÄ Á®≥ÂÆöÂèØÈù† ‚Ä¢ Êô∫ËÉΩÁõëÊéß ‚Ä¢ Èò≤Âç°Ê≠ª                              ‚ïë
‚ïë                                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "\033[0m"
    
    echo -e "\033[38;5;46müîß Á≥ªÁªüÈÖçÁΩÆ\033[0m"
    echo "   ‚îú‚îÄ Âπ∂ÂèëÁ∫øÁ®ã: $THREADS"
    echo "   ‚îú‚îÄ ÂàÜÂùóÂ§ßÂ∞è: $CHUNK_SIZE" 
    echo "   ‚îú‚îÄ ÁºìÂ≠òÂ§ßÂ∞è: $BUFFER_SIZE"
    echo "   ‚îî‚îÄ ‰ΩéÈÄüÈòàÂÄº: ${LOW_SPEED_MB}MB/s"
    echo
}

###################### ‰∏ªÁ®ãÂ∫è ######################
show_banner

# Ê£ÄÊü•‰æùËµñ
for cmd in bc jq curl rclone; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
        error_log "Áº∫Â∞ëÂøÖË¶ÅÂ∑•ÂÖ∑: $cmd"
        exit 1
    fi
done

# Ëé∑ÂèñÁΩëÂç°‰ø°ÊÅØ
MAIN_INTERFACE=$(get_main_interface)
if [ -z "$MAIN_INTERFACE" ]; then
    MAIN_INTERFACE="eth0"
fi

INTERFACE_IP=$(ip addr show "$MAIN_INTERFACE" 2>/dev/null | grep 'inet ' | awk '{print $2}' | head -1 || echo "N/A")
echo -e "\033[38;5;226müåê ÁΩëÁªúÊé•Âè£\033[0m: $MAIN_INTERFACE ($INTERFACE_IP)"

# ÂàùÂßãÂåñÁΩëÂç°ÁõëÊéß
if grep -q "^[ ]*${MAIN_INTERFACE}[:@]" /proc/net/dev 2>/dev/null; then
    echo "   ‚îî‚îÄ ÁΩëÂç°ÁõëÊéßÂ∞±Áª™"
    reset_network_monitor "$MAIN_INTERFACE"
else
    echo "   ‚îî‚îÄ ‚ö†Ô∏è ÁΩëÂç°ÁõëÊéßÂèØËÉΩ‰∏çÂáÜÁ°Æ"
fi

# Áî®Êà∑‰∫§‰∫í
DEFAULT_REPEAT=25
echo -e "\033[38;5;51m‚è∞ Âæ™ÁéØÈó¥Èöî\033[0m"
read -p "   Âæ™ÁéØÈó¥ÈöîÂ∞èÊó∂Êï∞ (ÈªòËÆ§${DEFAULT_REPEAT}Â∞èÊó∂Ôºå0=‰ªÖÊâßË°å‰∏ÄÊ¨°): " REPEAT_INTERVAL_HOURS
REPEAT_INTERVAL_HOURS=${REPEAT_INTERVAL_HOURS:-$DEFAULT_REPEAT}

# ËäÇÁÇπÈÄâÊã©
ALL_REMOTES=($(rclone listremotes | sed 's/:$//'))
if [ ${#ALL_REMOTES[@]} -eq 0 ]; then
    error_log "Êú™Ê£ÄÊµãÂà∞rcloneÂ≠òÂÇ®ËäÇÁÇπ"
    exit 1
fi

echo -e "\n\033[38;5;51müü¢ Â≠òÂÇ®ËäÇÁÇπ\033[0m (ÂÖ±${#ALL_REMOTES[@]}‰∏™)"
for i in "${!ALL_REMOTES[@]}"; do
    echo "   ‚îú‚îÄ [$((i+1))] ${ALL_REMOTES[i]}"
done

echo -e "\n\033[38;5;196müéØ ËäÇÁÇπÈÄâÊã©\033[0m"
read -p "   ÈÄâÊã©ËäÇÁÇπ (ÈªòËÆ§ÂÖ®ÈÄâÂπ∂ÈöèÊú∫ÊéíÂ∫èÔºåÊï∞Â≠óÁî®Á©∫Ê†ºÂàÜÈöî): " NODE_SELECTION

if [ -z "$NODE_SELECTION" ]; then
    SELECTED_REMOTES=($(printf '%s\n' "${ALL_REMOTES[@]}" | shuf))
    echo "   ‚úÖ Â∑≤ÈÄâÊã©ÂÖ®ÈÉ®ËäÇÁÇπÂπ∂ÈöèÊú∫ÊéíÂ∫è"
else
    SELECTED_REMOTES=()
    for num in $NODE_SELECTION; do
        if echo "$num" | grep -q '^[0-9]*$' && [ "$num" -ge 1 ] && [ "$num" -le ${#ALL_REMOTES[@]} ]; then
            SELECTED_REMOTES+=("${ALL_REMOTES[$((num-1))]}")
        fi
    done
fi

if [ ${#SELECTED_REMOTES[@]} -eq 0 ]; then
    error_log "Êú™ÈÄâÊã©ÊúâÊïàËäÇÁÇπ"
    exit 1
fi

echo "   Â∑≤ÈÄâÊã©: ${SELECTED_REMOTES[*]}"

read -p "üìç Ëµ∑ÂßãÊñá‰ª∂Ë°åÂè∑ (ÈªòËÆ§1): " START_LINE
START_LINE=${START_LINE:-1}

# ‰∏ãËΩΩÊñá‰ª∂ÂàóË°®
WARC_FILE="$TMP_DIR/warc.paths"
echo -e "\n\033[38;5;226müì• Ê≠£Âú®Ëé∑ÂèñÊñá‰ª∂ÂàóË°®...\033[0m"
if curl -sL "$WARC_LIST_URL" | gunzip -c > "$WARC_FILE"; then
    TOTAL_LINES=$(wc -l < "$WARC_FILE")
    echo "‚úÖ ÊàêÂäüËé∑Âèñ $TOTAL_LINES ‰∏™Êñá‰ª∂"
else
    error_log "Ëé∑ÂèñÊñá‰ª∂ÂàóË°®Â§±Ë¥•"
    exit 1
fi

###################### ‰∏ªÂæ™ÁéØ ######################
echo -e "\n\033[38;5;51müöÄ ÂºÄÂßã‰∏ä‰º†‰ªªÂä°...\033[0m"

while true; do
    echo -e "\n\033[48;5;21m========== Êñ∞‰∏ÄËΩÆ‰∏ä‰º† $(date '+%F %T') ==========\033[0m"
    
    for REMOTE in "${SELECTED_REMOTES[@]}"; do
        echo -e "\n‚îå‚îÄ \033[38;5;82müöÄ ËäÇÁÇπ: $REMOTE\033[0m"
        
        # Êñá‰ª∂ÂíåÁä∂ÊÄÅÁÆ°ÁêÜ
        PROGRESS_FILE="$TMP_DIR/${REMOTE}.progress"
        LOGFILE="$LOG_DIR/${REMOTE}_$(date +%F_%H-%M-%S).log"
        
        if [ ! -f "$PROGRESS_FILE" ]; then
            echo "$START_LINE" > "$PROGRESS_FILE"
        fi
        CURRENT_LINE=$(cat "$PROGRESS_FILE")
        
        # ÈáçÊñ∞ÂàùÂßãÂåñÁΩëÂç°ÁõëÊéß
        reset_network_monitor "$MAIN_INTERFACE"
        
        # Ëé∑ÂèñÂàùÂßãÂ≠òÂÇ®Èáè
        LAST_STORAGE=$(get_node_storage "$REMOTE")
        debug_log "ËäÇÁÇπ $REMOTE ÂàùÂßãÂ≠òÂÇ®: $LAST_STORAGE bytes"
        
        NO_PROGRESS=0
        
        while [ "$CURRENT_LINE" -le "$TOTAL_LINES" ]; do
            BATCH_END=$((CURRENT_LINE + THREADS - 1))
            if [ "$BATCH_END" -gt "$TOTAL_LINES" ]; then
                BATCH_END=$TOTAL_LINES
            fi
            
            echo -e "\n‚îú‚îÄ üöÄ ÊâπÊ¨° $CURRENT_LINE-$BATCH_END ÂÖ± $((BATCH_END-CURRENT_LINE+1)) Êñá‰ª∂"
            
            # ÂáÜÂ§áÊâπÊ¨°Êñá‰ª∂
            BATCH_URLS="$TMP_DIR/${REMOTE}_urls_${CURRENT_LINE}.txt"
            sed -n "${CURRENT_LINE},${BATCH_END}p" "$WARC_FILE" | \
                sed "s|^|https://data.commoncrawl.org/|" > "$BATCH_URLS"
            
            # ÂêØÂä®‰∏ä‰º†ËøõÁ®ã
            UPLOAD_PIDS=()
            idx=0
            
            while IFS= read -r url && [ "$idx" -lt "$THREADS" ]; do
                filename=$(basename "$url")
                
                rclone copyurl "$url" "$REMOTE:$DEST_PATH" \
                    --auto-filename \
                    --drive-chunk-size "$CHUNK_SIZE" \
                    --buffer-size "$BUFFER_SIZE" \
                    --multi-thread-streams "$MULTI_THREAD_STREAMS" \
                    --checkers 4 \
                    --disable-http2 \
                    --max-transfer "$MAX_TRANSFER" \
                    --timeout 30m \
                    --retries 2 \
                    --low-level-retries 5 \
                    --stats 5s \
                    --stats-one-line \
                    >> "$LOGFILE" 2>&1 &
                
                UPLOAD_PIDS+=("$!")
                idx=$((idx + 1))
                echo "‚îú‚îÄ üîó Á∫øÁ®ã $idx: ${filename:0:35}..."
                sleep 0.1
            done < "$BATCH_URLS"
            
            echo "‚îú‚îÄ ‚ö° ÂêØÂä® ${#UPLOAD_PIDS[@]} ‰∏™‰∏ä‰º†Á∫øÁ®ã"
            
            # ÁõëÊéßÂæ™ÁéØ
            monitor_count=0
            slow_count=0
            low_speed_triggered=false
            
            while true; do
                # Ê£ÄÊü•ËøõÁ®ãÁä∂ÊÄÅ
                alive=0
                for pid in "${UPLOAD_PIDS[@]}"; do
                    if ps -p "$pid" > /dev/null 2>&1; then
                        alive=$((alive + 1))
                    fi
                done
                
                # ÊâÄÊúâËøõÁ®ãÂÆåÊàêÂàôÈÄÄÂá∫
                if [ "$alive" -eq 0 ]; then
                    echo -e "\n‚îú‚îÄ ‚úÖ ÊâπÊ¨°ËøõÁ®ãÂÆåÊàê"
                    break
                fi
                
                # Ëé∑ÂèñÁõëÊéßÊï∞ÊçÆ  
                speed=$(get_network_speed "$MAIN_INTERFACE")
                storage_bytes=$(get_node_storage "$REMOTE")
                
                # ÂÆâÂÖ®ËÆ°ÁÆóÂ≠òÂÇ®GB
                if echo "$storage_bytes" | grep -q '^[0-9]*$' && [ "$storage_bytes" -gt 0 ]; then
                    storage_gb=$((storage_bytes / 1073741824))
                else
                    storage_gb=0
                fi
                
                # Á°Æ‰øùspeedÊòØÊï∞Â≠ó
                if ! echo "$speed" | grep -q '^[0-9]*$'; then
                    speed=0
                fi
                
                printf "\r‚îú‚îÄ üìä ÁΩëÈÄü: %dMB/s | Ê¥ªË∑É: %d | Â≠òÂÇ®: %dGB" "$speed" "$alive" "$storage_gb"
                
                monitor_count=$((monitor_count + 1))
                
                # ‰ΩéÈÄüÊ£ÄÊµãÔºàË∑≥ËøáÂâç12Ê¨°ÔºåÂç≥Ââç60ÁßíÔºâ
                if [ "$monitor_count" -gt 12 ]; then
                    if [ "$speed" -lt "$LOW_SPEED_MB" ]; then
                        slow_count=$((slow_count + 5))
                    else
                        slow_count=0
                    fi
                    
                    # Ëß¶Âèë‰ΩéÈÄüÂ§ÑÁêÜ
                    if [ "$slow_count" -ge "$LOW_SPEED_SECONDS" ]; then
                        echo -e "\n‚îú‚îÄ üêå Ê£ÄÊµãÂà∞‰ΩéÈÄü: ${speed}MB/s < ${LOW_SPEED_MB}MB/s"
                        low_speed_triggered=true
                        break
                    fi
                fi
                
                # Ë∂ÖÊó∂Ê£ÄÊµãÔºà10ÂàÜÈíüÔºâ
                if [ "$monitor_count" -gt 120 ]; then
                    echo -e "\n‚îú‚îÄ ‚è∞ ÊâπÊ¨°ÁõëÊéßË∂ÖÊó∂"
                    break
                fi
                
                sleep 5
            done
            
            # Â§ÑÁêÜÂºÇÂ∏∏ÊÉÖÂÜµ
            if [ "$low_speed_triggered" = true ] || [ "$monitor_count" -gt 120 ]; then
                cleanup_processes "$REMOTE"
            fi
            
            # È™åËØÅÊâπÊ¨°ÁªìÊûú
            NEW_STORAGE=$(verify_batch_completion "$REMOTE" "$LAST_STORAGE")
            
            if [ "$NEW_STORAGE" -gt "$LAST_STORAGE" ]; then
                size_diff_gb=$(echo "scale=2; ($NEW_STORAGE - $LAST_STORAGE) / 1073741824" | bc -l)
                echo -e "\n‚îú‚îÄ ‚úÖ ÊâπÊ¨°ÊàêÂäü | Êñ∞Â¢û ${size_diff_gb}GB"
                LAST_STORAGE=$NEW_STORAGE
                NO_PROGRESS=0
            else
                echo -e "\n‚îú‚îÄ ‚ö†Ô∏è Êó†ËøõÂ±ï (${NO_PROGRESS}/3)"
                NO_PROGRESS=$((NO_PROGRESS + 1))
            fi
            
            # ËøûÁª≠Â§±Ë¥•ÂàôÂàáÊç¢ËäÇÁÇπ
            if [ "$NO_PROGRESS" -ge 3 ]; then
                echo "‚îî‚îÄ üö´ ËøûÁª≠Â§±Ë¥•ÔºåÂàáÊç¢‰∏ã‰∏Ä‰∏™ËäÇÁÇπ"
                break
            fi
            
            # Êõ¥Êñ∞ËøõÂ∫¶
            CURRENT_LINE=$((BATCH_END + 1))
            echo "$CURRENT_LINE" > "$PROGRESS_FILE"
            rm -f "$BATCH_URLS"
        done
        
        echo -e "‚îî‚îÄ ‚úÖ ËäÇÁÇπ \033[38;5;82m$REMOTE\033[0m Â§ÑÁêÜÂÆåÊàê"
    done
    
    # Ê£ÄÊü•ÊòØÂê¶Âæ™ÁéØ
    if [ "$REPEAT_INTERVAL_HOURS" -eq 0 ]; then
        echo -e "\n\033[38;5;46müéâ ÊâÄÊúâ‰ªªÂä°ÂÆåÊàêÔºÅ\033[0m"
        break
    fi
    
    echo -e "\n\033[38;5;226müí§ ‰ºëÁú† ${REPEAT_INTERVAL_HOURS}Â∞èÊó∂ÂêéÁªßÁª≠...\033[0m"
    sleep $((REPEAT_INTERVAL_HOURS * 3600))
done

echo -e "\n\033[38;5;46müéâ ËÑöÊú¨ÊâßË°åÂÆåÊØïÔºÅ\033[0m"
